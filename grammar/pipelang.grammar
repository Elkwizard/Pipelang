comment = /\/\/.*|\/\*([\w\W]*?)\*\//
string = /"((\\.)*(.*?))*?"/
char = /'\\?.'/
symbol = /[{}()\[\];,:.#]|\|>|(=(?!=))/
number = /\-?\b(\d+\.?\d*|\.\d+)([eE][\+\-]?\d+)?\b/g
identifier = /\w+|\|+|[^\w\s(){}\[\]|'",:;.#]+/

// base expressions
Reference = name:identifier
NumberValue = value:number
StringValue = value:string
CharValue = value:char
Value = NumberValue | StringValue | CharValue
Field = key:identifier ":" value:Precedence
List = "{" (elements:Precedence[","?] | elements:Field[","?]) "}"
Parameter = type:Expression? name:Name
Operator = "[" (parameters:Parameter[","] "=" body:Body | body:Precedence) "]"
Nested = "#"? "(" replace:Precedence ")"
BaseExpression = Nested | Operator | List | Reference | Value
Index = "(" start:Precedence? ":" end:Precedence? ")"
Arguments = "(" arguments:Precedence[","] ")"
Property = "." key:identifier
Overload = "&" overload:Expression
Cast = "as" type:Expression
Suffix = Arguments | Index | Property | Overload | Cast
Expression = base:Expression step:Suffix | BaseExpression

// precedence expressions
Precedence = operators Expression {
	prefix Prefix ("-" | "++" | "--")
	right Exponential ("^" | "**")
	left Product ("*" | "/" | "%")
	left Sum ("+" | "-")
	left Compare ("==" | "!=" | "===" | "!==" | "<" | "<=" | ">" | ">=")
	left Logic ("&&" | "||")
	custom Conditional (condition:last "?" ifTrue:Precedence ":" ifFalse:Conditional)
}

// full expressions
Call = operator:Expression arguments:Expression*
ListDestructure = "{" names:Name[","?] "}"
DestructureField = key:identifier ":" name:Name?
ObjectDestructure = "{" fields:DestructureField[","?] "}"
WrappedName = "[" name:Name "]"
Name = WrappedName | ListDestructure | ObjectDestructure | identifier
Alias = "is" name:Name
Reset = "to" value:Expression
Step = Alias | Reset | Cast | Call
InitialCall = operator:Expression arguments:Expression+
FullExpression = base:FullExpression "|>" step:Step | InitialCall | Expression

Assignment = target:Name "=" value:FullExpression
Statement = Assignment | FullExpression
Body = statements:Statement{";"} ";"?

root = Body