comment = /\/\/.*|\/\*([\w\W]*?)\*\//
string = /"((\\.)*(.*?))*?"/
char = /'\\?.'/
symbol = /[{}()\[\];,:.#]|\|>|(=(?!=))/
number = /\-?\b(\d+\.?\d*|\.\d+)([eE][\+\-]?\d+)?\b/g
identifier = /\w+|\|+|[^\w\s(){}\[\]|'",:;.#]+/

// base expressions
Reference = name:identifier
NumberValue = value:number
StringValue = value:string
CharValue = value:char
Value = NumberValue | StringValue | CharValue
Field = key:identifier ":" value:Expression
List = "{" (elements:Expression[","?] | elements:Field[","?]) "}"
Dimension = "(" length:number? ")"
Type = base:("any" | "real" | "operator" | "primitive") dimensions:Dimension*
Parameter = type:Type? name:identifier
Operator = "[" parameters:Parameter[","] "=" body:Body "]"
Nested = "#"? "(" replace:Precedence ")"
BaseExpression = Nested | Operator | List | Reference | Value
FromIndex = start:Expression ":"
ToIndex = ":" end:Expression
IndexRange = start:Expression ":" end:Expression
Index = "(" replace:(ToIndex | IndexRange | FromIndex) ")"
Arguments = "(" arguments:Precedence[","] ")"
Property = "." key:identifier
Overload = "&" overload:Expression
Suffix = Arguments | Index | Property | Overload
Expression = base:Expression step:Suffix | BaseExpression

// precedence expressions
Precedence = operators Expression {
	prefix Prefix ("-")
	left Product ("*" | "/" | "%")
	left Sum ("+" | "-")
	custom Conditional (condition:last "?" ifTrue:Precedence ":" ifFalse:Conditional)
}

// full expressions
Call = operator:Expression arguments:Expression*
Alias = "is" name:identifier
Reset = "to" value:Expression
Step = Alias | Reset | Call
InitialCall = operator:Expression arguments:Expression+
FullExpression = base:FullExpression "|>" step:Step | InitialCall | Expression

Assignment = target:identifier "=" value:FullExpression
Statement = Assignment | FullExpression
Body = statements:Statement{";"} ";"?

root = Body